
#include <cassert>
#include <cstring>
#include <iostream>
#include <netinet/in.h>

#include "libasn/protocols/iec61850.h"
#include "libasn/basic_reader.h"

using namespace std::literals;

/* See 1 packet: https://github.com/mgadelha/Sampled_Values/blob/master/SV_Normal_Traffic.cap */

uint8_t packet_bytes[] = {0x40, 0x01, 0x00, 0x66, 0x00, 0x00, 0x00, 0x00, 0x60, 0x5c, 0x80, 0x01, 0x01, 0xa2, 0x57,
                          0x30, 0x55, 0x80, 0x04, 0x34, 0x30, 0x30, 0x31, 0x82, 0x02, 0x01, 0x18, 0x83, 0x04, 0x00,
                          0x00, 0x00, 0x01, 0x85, 0x01, 0x02, 0x87, 0x40, 0xff, 0xfe, 0x59, 0x82, 0x00, 0x00, 0x00,
                          0x00, 0x00, 0x04, 0x3d, 0xdc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfd, 0x6f, 0x5c, 0x00, 0x00,
                          0x00, 0x00, 0x00, 0x00, 0x06, 0xba, 0x00, 0x00, 0x20, 0x00, 0xff, 0x8d, 0xf4, 0x00, 0x00,
                          0x00, 0x00, 0x00, 0x01, 0x1d, 0xfb, 0xc2, 0x00, 0x00, 0x00, 0x00, 0xff, 0x55, 0x60, 0x0c,
                          0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x4f, 0xce, 0x00, 0x00, 0x20, 0x00};

uint8_t data[] = {0xff, 0xfe, 0x59, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x3d, 0xdc, 0x00, 0x00, 0x00, 0x00,
                  0xff, 0xfd, 0x6f, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xba, 0x00, 0x00, 0x20, 0x00,
                  0xff, 0x8d, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1d, 0xfb, 0xc2, 0x00, 0x00, 0x00, 0x00,
                  0xff, 0x55, 0x60, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x4f, 0xce, 0x00, 0x00, 0x20, 0x00};

int main() {
    auto hdr = reinterpret_cast<libasn::iec61850::hdr *>(packet_bytes);

    assert(hdr->length() == 102);
    assert(hdr->reserved_1() == 0);
    assert(hdr->reserved_2() == 0);

    auto rd = basic_reader{
        std::string_view{hdr->payload<char>(), hdr->payload_length()}
    };

    auto sav_pdu = libasn::iec61850::sv::sample_values.read(rd);
    assert(sav_pdu.has_value());

    assert(sav_pdu->tag_number == libasn::iec61850::sv::application_choice::SAV_PDU);

    auto [no_asdu, seq_asdu] = sav_pdu->get<libasn::iec61850::sv::application_choice::SAV_PDU>();
    assert(no_asdu == 1);

    assert(seq_asdu.size());
    auto asdu = libasn::iec61850::sv::asdu.read(seq_asdu);
    assert(asdu.has_value());
    assert(seq_asdu.size() == 0);

    auto [sv_id, dat_set, smp_cnt, conf_rev, refr_tm, smp_synch, smp_rate, seq_data, smp_mod, gmid_data] = *asdu;

    assert(sv_id.view() == "4001"sv);
    assert(!dat_set.has_value());
    assert(smp_cnt == 280);
    assert(conf_rev == 1);
    assert(!refr_tm.has_value());
    assert(smp_synch == 2);
    assert(!smp_rate.has_value());
    assert(seq_data.view() == std::string_view(reinterpret_cast<const char *>(data), sizeof(data)));
    assert(!smp_mod.has_value());
    assert(!gmid_data.has_value());

    return 0;
}
